// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/state.proto

#ifndef PROTOBUF_messages_2fstate_2eproto__INCLUDED
#define PROTOBUF_messages_2fstate_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {
namespace state {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_messages_2fstate_2eproto();
void protobuf_AssignDesc_messages_2fstate_2eproto();
void protobuf_ShutdownFile_messages_2fstate_2eproto();

class Entry;
class Operation;
class Operation_Snapshot;
class Operation_Expunge;

enum Operation_Type {
  Operation_Type_SNAPSHOT = 1,
  Operation_Type_EXPUNGE = 2
};
bool Operation_Type_IsValid(int value);
const Operation_Type Operation_Type_Type_MIN = Operation_Type_SNAPSHOT;
const Operation_Type Operation_Type_Type_MAX = Operation_Type_EXPUNGE;
const int Operation_Type_Type_ARRAYSIZE = Operation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor();
inline const ::std::string& Operation_Type_Name(Operation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Type_descriptor(), value);
}
inline bool Operation_Type_Parse(
    const ::std::string& name, Operation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Type>(
    Operation_Type_descriptor(), name, value);
}
// ===================================================================

class Entry : public ::google::protobuf::Message {
 public:
  Entry();
  virtual ~Entry();

  Entry(const Entry& from);

  inline Entry& operator=(const Entry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Entry& default_instance();

  void Swap(Entry* other);

  // implements Message ----------------------------------------------

  Entry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Entry& from);
  void MergeFrom(const Entry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required bytes uuid = 2;
  inline bool has_uuid() const;
  inline void clear_uuid();
  static const int kUuidFieldNumber = 2;
  inline const ::std::string& uuid() const;
  inline void set_uuid(const ::std::string& value);
  inline void set_uuid(const char* value);
  inline void set_uuid(const void* value, size_t size);
  inline ::std::string* mutable_uuid();
  inline ::std::string* release_uuid();
  inline void set_allocated_uuid(::std::string* uuid);

  // required bytes value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:mesos.internal.state.Entry)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_uuid();
  inline void clear_has_uuid();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* uuid_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2fstate_2eproto();
  friend void protobuf_AssignDesc_messages_2fstate_2eproto();
  friend void protobuf_ShutdownFile_messages_2fstate_2eproto();

  void InitAsDefaultInstance();
  static Entry* default_instance_;
};
// -------------------------------------------------------------------

class Operation_Snapshot : public ::google::protobuf::Message {
 public:
  Operation_Snapshot();
  virtual ~Operation_Snapshot();

  Operation_Snapshot(const Operation_Snapshot& from);

  inline Operation_Snapshot& operator=(const Operation_Snapshot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_Snapshot& default_instance();

  void Swap(Operation_Snapshot* other);

  // implements Message ----------------------------------------------

  Operation_Snapshot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_Snapshot& from);
  void MergeFrom(const Operation_Snapshot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .mesos.internal.state.Entry entry = 1;
  inline bool has_entry() const;
  inline void clear_entry();
  static const int kEntryFieldNumber = 1;
  inline const ::mesos::internal::state::Entry& entry() const;
  inline ::mesos::internal::state::Entry* mutable_entry();
  inline ::mesos::internal::state::Entry* release_entry();
  inline void set_allocated_entry(::mesos::internal::state::Entry* entry);

  // @@protoc_insertion_point(class_scope:mesos.internal.state.Operation.Snapshot)
 private:
  inline void set_has_entry();
  inline void clear_has_entry();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::internal::state::Entry* entry_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2fstate_2eproto();
  friend void protobuf_AssignDesc_messages_2fstate_2eproto();
  friend void protobuf_ShutdownFile_messages_2fstate_2eproto();

  void InitAsDefaultInstance();
  static Operation_Snapshot* default_instance_;
};
// -------------------------------------------------------------------

class Operation_Expunge : public ::google::protobuf::Message {
 public:
  Operation_Expunge();
  virtual ~Operation_Expunge();

  Operation_Expunge(const Operation_Expunge& from);

  inline Operation_Expunge& operator=(const Operation_Expunge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation_Expunge& default_instance();

  void Swap(Operation_Expunge* other);

  // implements Message ----------------------------------------------

  Operation_Expunge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation_Expunge& from);
  void MergeFrom(const Operation_Expunge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:mesos.internal.state.Operation.Expunge)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2fstate_2eproto();
  friend void protobuf_AssignDesc_messages_2fstate_2eproto();
  friend void protobuf_ShutdownFile_messages_2fstate_2eproto();

  void InitAsDefaultInstance();
  static Operation_Expunge* default_instance_;
};
// -------------------------------------------------------------------

class Operation : public ::google::protobuf::Message {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Operation& default_instance();

  void Swap(Operation* other);

  // implements Message ----------------------------------------------

  Operation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Operation_Snapshot Snapshot;
  typedef Operation_Expunge Expunge;

  typedef Operation_Type Type;
  static const Type SNAPSHOT = Operation_Type_SNAPSHOT;
  static const Type EXPUNGE = Operation_Type_EXPUNGE;
  static inline bool Type_IsValid(int value) {
    return Operation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Operation_Type_Type_MIN;
  static const Type Type_MAX =
    Operation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Operation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Operation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Operation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Operation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required .mesos.internal.state.Operation.Type type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::mesos::internal::state::Operation_Type type() const;
  inline void set_type(::mesos::internal::state::Operation_Type value);

  // optional .mesos.internal.state.Operation.Snapshot snapshot = 2;
  inline bool has_snapshot() const;
  inline void clear_snapshot();
  static const int kSnapshotFieldNumber = 2;
  inline const ::mesos::internal::state::Operation_Snapshot& snapshot() const;
  inline ::mesos::internal::state::Operation_Snapshot* mutable_snapshot();
  inline ::mesos::internal::state::Operation_Snapshot* release_snapshot();
  inline void set_allocated_snapshot(::mesos::internal::state::Operation_Snapshot* snapshot);

  // optional .mesos.internal.state.Operation.Expunge expunge = 3;
  inline bool has_expunge() const;
  inline void clear_expunge();
  static const int kExpungeFieldNumber = 3;
  inline const ::mesos::internal::state::Operation_Expunge& expunge() const;
  inline ::mesos::internal::state::Operation_Expunge* mutable_expunge();
  inline ::mesos::internal::state::Operation_Expunge* release_expunge();
  inline void set_allocated_expunge(::mesos::internal::state::Operation_Expunge* expunge);

  // @@protoc_insertion_point(class_scope:mesos.internal.state.Operation)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_snapshot();
  inline void clear_has_snapshot();
  inline void set_has_expunge();
  inline void clear_has_expunge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::mesos::internal::state::Operation_Snapshot* snapshot_;
  ::mesos::internal::state::Operation_Expunge* expunge_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_messages_2fstate_2eproto();
  friend void protobuf_AssignDesc_messages_2fstate_2eproto();
  friend void protobuf_ShutdownFile_messages_2fstate_2eproto();

  void InitAsDefaultInstance();
  static Operation* default_instance_;
};
// ===================================================================


// ===================================================================

// Entry

// required string name = 1;
inline bool Entry::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Entry::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Entry::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Entry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Entry::name() const {
  return *name_;
}
inline void Entry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Entry::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Entry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes uuid = 2;
inline bool Entry::has_uuid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Entry::set_has_uuid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Entry::clear_has_uuid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Entry::clear_uuid() {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    uuid_->clear();
  }
  clear_has_uuid();
}
inline const ::std::string& Entry::uuid() const {
  return *uuid_;
}
inline void Entry::set_uuid(const ::std::string& value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Entry::set_uuid(const char* value) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(value);
}
inline void Entry::set_uuid(const void* value, size_t size) {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  uuid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_uuid() {
  set_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    uuid_ = new ::std::string;
  }
  return uuid_;
}
inline ::std::string* Entry::release_uuid() {
  clear_has_uuid();
  if (uuid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uuid_;
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_uuid(::std::string* uuid) {
  if (uuid_ != &::google::protobuf::internal::kEmptyString) {
    delete uuid_;
  }
  if (uuid) {
    set_has_uuid();
    uuid_ = uuid;
  } else {
    clear_has_uuid();
    uuid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required bytes value = 3;
inline bool Entry::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Entry::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Entry::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Entry::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& Entry::value() const {
  return *value_;
}
inline void Entry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void Entry::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Entry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* Entry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Entry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Operation_Snapshot

// required .mesos.internal.state.Entry entry = 1;
inline bool Operation_Snapshot::has_entry() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation_Snapshot::set_has_entry() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation_Snapshot::clear_has_entry() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation_Snapshot::clear_entry() {
  if (entry_ != NULL) entry_->::mesos::internal::state::Entry::Clear();
  clear_has_entry();
}
inline const ::mesos::internal::state::Entry& Operation_Snapshot::entry() const {
  return entry_ != NULL ? *entry_ : *default_instance_->entry_;
}
inline ::mesos::internal::state::Entry* Operation_Snapshot::mutable_entry() {
  set_has_entry();
  if (entry_ == NULL) entry_ = new ::mesos::internal::state::Entry;
  return entry_;
}
inline ::mesos::internal::state::Entry* Operation_Snapshot::release_entry() {
  clear_has_entry();
  ::mesos::internal::state::Entry* temp = entry_;
  entry_ = NULL;
  return temp;
}
inline void Operation_Snapshot::set_allocated_entry(::mesos::internal::state::Entry* entry) {
  delete entry_;
  entry_ = entry;
  if (entry) {
    set_has_entry();
  } else {
    clear_has_entry();
  }
}

// -------------------------------------------------------------------

// Operation_Expunge

// required string name = 1;
inline bool Operation_Expunge::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation_Expunge::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation_Expunge::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation_Expunge::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& Operation_Expunge::name() const {
  return *name_;
}
inline void Operation_Expunge::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation_Expunge::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void Operation_Expunge::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Operation_Expunge::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* Operation_Expunge::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Operation_Expunge::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Operation

// required .mesos.internal.state.Operation.Type type = 1;
inline bool Operation::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Operation::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Operation::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Operation::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::mesos::internal::state::Operation_Type Operation::type() const {
  return static_cast< ::mesos::internal::state::Operation_Type >(type_);
}
inline void Operation::set_type(::mesos::internal::state::Operation_Type value) {
  assert(::mesos::internal::state::Operation_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional .mesos.internal.state.Operation.Snapshot snapshot = 2;
inline bool Operation::has_snapshot() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Operation::set_has_snapshot() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Operation::clear_has_snapshot() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Operation::clear_snapshot() {
  if (snapshot_ != NULL) snapshot_->::mesos::internal::state::Operation_Snapshot::Clear();
  clear_has_snapshot();
}
inline const ::mesos::internal::state::Operation_Snapshot& Operation::snapshot() const {
  return snapshot_ != NULL ? *snapshot_ : *default_instance_->snapshot_;
}
inline ::mesos::internal::state::Operation_Snapshot* Operation::mutable_snapshot() {
  set_has_snapshot();
  if (snapshot_ == NULL) snapshot_ = new ::mesos::internal::state::Operation_Snapshot;
  return snapshot_;
}
inline ::mesos::internal::state::Operation_Snapshot* Operation::release_snapshot() {
  clear_has_snapshot();
  ::mesos::internal::state::Operation_Snapshot* temp = snapshot_;
  snapshot_ = NULL;
  return temp;
}
inline void Operation::set_allocated_snapshot(::mesos::internal::state::Operation_Snapshot* snapshot) {
  delete snapshot_;
  snapshot_ = snapshot;
  if (snapshot) {
    set_has_snapshot();
  } else {
    clear_has_snapshot();
  }
}

// optional .mesos.internal.state.Operation.Expunge expunge = 3;
inline bool Operation::has_expunge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Operation::set_has_expunge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Operation::clear_has_expunge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Operation::clear_expunge() {
  if (expunge_ != NULL) expunge_->::mesos::internal::state::Operation_Expunge::Clear();
  clear_has_expunge();
}
inline const ::mesos::internal::state::Operation_Expunge& Operation::expunge() const {
  return expunge_ != NULL ? *expunge_ : *default_instance_->expunge_;
}
inline ::mesos::internal::state::Operation_Expunge* Operation::mutable_expunge() {
  set_has_expunge();
  if (expunge_ == NULL) expunge_ = new ::mesos::internal::state::Operation_Expunge;
  return expunge_;
}
inline ::mesos::internal::state::Operation_Expunge* Operation::release_expunge() {
  clear_has_expunge();
  ::mesos::internal::state::Operation_Expunge* temp = expunge_;
  expunge_ = NULL;
  return temp;
}
inline void Operation::set_allocated_expunge(::mesos::internal::state::Operation_Expunge* expunge) {
  delete expunge_;
  expunge_ = expunge;
  if (expunge) {
    set_has_expunge();
  } else {
    clear_has_expunge();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace state
}  // namespace internal
}  // namespace mesos

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mesos::internal::state::Operation_Type>() {
  return ::mesos::internal::state::Operation_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_messages_2fstate_2eproto__INCLUDED
