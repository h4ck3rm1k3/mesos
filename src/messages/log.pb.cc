// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages/log.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "messages/log.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace mesos {
namespace internal {
namespace log {

namespace {

const ::google::protobuf::Descriptor* Promise_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Promise_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_Nop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_Nop_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_Append_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_Append_reflection_ = NULL;
const ::google::protobuf::Descriptor* Action_Truncate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Action_Truncate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Action_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Metadata_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Metadata_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Metadata_Status_descriptor_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Record_Type_descriptor_ = NULL;
const ::google::protobuf::Descriptor* PromiseRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PromiseRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* PromiseResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PromiseResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* WriteResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WriteResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* LearnedMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LearnedMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* RecoverResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RecoverResponse_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_messages_2flog_2eproto() {
  protobuf_AddDesc_messages_2flog_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "messages/log.proto");
  GOOGLE_CHECK(file != NULL);
  Promise_descriptor_ = file->message_type(0);
  static const int Promise_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Promise, proposal_),
  };
  Promise_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Promise_descriptor_,
      Promise::default_instance_,
      Promise_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Promise, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Promise, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Promise));
  Action_descriptor_ = file->message_type(1);
  static const int Action_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, promised_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, performed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, learned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, nop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, append_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, truncate_),
  };
  Action_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_descriptor_,
      Action::default_instance_,
      Action_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action));
  Action_Nop_descriptor_ = Action_descriptor_->nested_type(0);
  static const int Action_Nop_offsets_[1] = {
  };
  Action_Nop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_Nop_descriptor_,
      Action_Nop::default_instance_,
      Action_Nop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Nop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Nop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action_Nop));
  Action_Append_descriptor_ = Action_descriptor_->nested_type(1);
  static const int Action_Append_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Append, bytes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Append, cksum_),
  };
  Action_Append_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_Append_descriptor_,
      Action_Append::default_instance_,
      Action_Append_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Append, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Append, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action_Append));
  Action_Truncate_descriptor_ = Action_descriptor_->nested_type(2);
  static const int Action_Truncate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Truncate, to_),
  };
  Action_Truncate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Action_Truncate_descriptor_,
      Action_Truncate::default_instance_,
      Action_Truncate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Truncate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Action_Truncate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Action_Truncate));
  Action_Type_descriptor_ = Action_descriptor_->enum_type(0);
  Metadata_descriptor_ = file->message_type(2);
  static const int Metadata_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, promised_),
  };
  Metadata_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Metadata_descriptor_,
      Metadata::default_instance_,
      Metadata_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Metadata, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Metadata));
  Metadata_Status_descriptor_ = Metadata_descriptor_->enum_type(0);
  Record_descriptor_ = file->message_type(3);
  static const int Record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, promise_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, metadata_),
  };
  Record_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Record));
  Record_Type_descriptor_ = Record_descriptor_->enum_type(0);
  PromiseRequest_descriptor_ = file->message_type(4);
  static const int PromiseRequest_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseRequest, proposal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseRequest, position_),
  };
  PromiseRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PromiseRequest_descriptor_,
      PromiseRequest::default_instance_,
      PromiseRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PromiseRequest));
  PromiseResponse_descriptor_ = file->message_type(5);
  static const int PromiseResponse_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, okay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, proposal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, action_),
  };
  PromiseResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PromiseResponse_descriptor_,
      PromiseResponse::default_instance_,
      PromiseResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PromiseResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PromiseResponse));
  WriteRequest_descriptor_ = file->message_type(6);
  static const int WriteRequest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, proposal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, learned_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, nop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, append_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, truncate_),
  };
  WriteRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteRequest_descriptor_,
      WriteRequest::default_instance_,
      WriteRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteRequest));
  WriteResponse_descriptor_ = file->message_type(7);
  static const int WriteResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, okay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, proposal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, position_),
  };
  WriteResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WriteResponse_descriptor_,
      WriteResponse::default_instance_,
      WriteResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WriteResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WriteResponse));
  LearnedMessage_descriptor_ = file->message_type(8);
  static const int LearnedMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedMessage, action_),
  };
  LearnedMessage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LearnedMessage_descriptor_,
      LearnedMessage::default_instance_,
      LearnedMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LearnedMessage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LearnedMessage));
  RecoverRequest_descriptor_ = file->message_type(9);
  static const int RecoverRequest_offsets_[1] = {
  };
  RecoverRequest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverRequest_descriptor_,
      RecoverRequest::default_instance_,
      RecoverRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverRequest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverRequest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverRequest));
  RecoverResponse_descriptor_ = file->message_type(10);
  static const int RecoverResponse_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverResponse, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverResponse, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverResponse, end_),
  };
  RecoverResponse_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RecoverResponse_descriptor_,
      RecoverResponse::default_instance_,
      RecoverResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverResponse, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecoverResponse, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RecoverResponse));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_messages_2flog_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Promise_descriptor_, &Promise::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_descriptor_, &Action::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_Nop_descriptor_, &Action_Nop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_Append_descriptor_, &Action_Append::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Action_Truncate_descriptor_, &Action_Truncate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Metadata_descriptor_, &Metadata::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PromiseRequest_descriptor_, &PromiseRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PromiseResponse_descriptor_, &PromiseResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteRequest_descriptor_, &WriteRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WriteResponse_descriptor_, &WriteResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LearnedMessage_descriptor_, &LearnedMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverRequest_descriptor_, &RecoverRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RecoverResponse_descriptor_, &RecoverResponse::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_messages_2flog_2eproto() {
  delete Promise::default_instance_;
  delete Promise_reflection_;
  delete Action::default_instance_;
  delete Action_reflection_;
  delete Action_Nop::default_instance_;
  delete Action_Nop_reflection_;
  delete Action_Append::default_instance_;
  delete Action_Append_reflection_;
  delete Action_Truncate::default_instance_;
  delete Action_Truncate_reflection_;
  delete Metadata::default_instance_;
  delete Metadata_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete PromiseRequest::default_instance_;
  delete PromiseRequest_reflection_;
  delete PromiseResponse::default_instance_;
  delete PromiseResponse_reflection_;
  delete WriteRequest::default_instance_;
  delete WriteRequest_reflection_;
  delete WriteResponse::default_instance_;
  delete WriteResponse_reflection_;
  delete LearnedMessage::default_instance_;
  delete LearnedMessage_reflection_;
  delete RecoverRequest::default_instance_;
  delete RecoverRequest_reflection_;
  delete RecoverResponse::default_instance_;
  delete RecoverResponse_reflection_;
}

void protobuf_AddDesc_messages_2flog_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022messages/log.proto\022\022mesos.internal.log"
    "\"\033\n\007Promise\022\020\n\010proposal\030\001 \002(\004\"\210\003\n\006Action"
    "\022\020\n\010position\030\001 \002(\004\022\020\n\010promised\030\002 \002(\004\022\021\n\t"
    "performed\030\003 \001(\004\022\017\n\007learned\030\004 \001(\010\022-\n\004type"
    "\030\005 \001(\0162\037.mesos.internal.log.Action.Type\022"
    "+\n\003nop\030\006 \001(\0132\036.mesos.internal.log.Action"
    ".Nop\0221\n\006append\030\007 \001(\0132!.mesos.internal.lo"
    "g.Action.Append\0225\n\010truncate\030\010 \001(\0132#.meso"
    "s.internal.log.Action.Truncate\032\005\n\003Nop\032&\n"
    "\006Append\022\r\n\005bytes\030\001 \002(\014\022\r\n\005cksum\030\002 \001(\014\032\026\n"
    "\010Truncate\022\n\n\002to\030\001 \002(\004\")\n\004Type\022\007\n\003NOP\020\001\022\n"
    "\n\006APPEND\020\002\022\014\n\010TRUNCATE\020\003\"\232\001\n\010Metadata\022:\n"
    "\006status\030\001 \002(\0162#.mesos.internal.log.Metad"
    "ata.Status:\005EMPTY\022\023\n\010promised\030\002 \002(\004:\0010\"="
    "\n\006Status\022\n\n\006VOTING\020\001\022\016\n\nRECOVERING\020\002\022\014\n\010"
    "STARTING\020\003\022\t\n\005EMPTY\020\004\"\360\001\n\006Record\022-\n\004type"
    "\030\001 \002(\0162\037.mesos.internal.log.Record.Type\022"
    ",\n\007promise\030\002 \001(\0132\033.mesos.internal.log.Pr"
    "omise\022*\n\006action\030\003 \001(\0132\032.mesos.internal.l"
    "og.Action\022.\n\010metadata\030\004 \001(\0132\034.mesos.inte"
    "rnal.log.Metadata\"-\n\004Type\022\013\n\007PROMISE\020\001\022\n"
    "\n\006ACTION\020\002\022\014\n\010METADATA\020\003\"4\n\016PromiseReque"
    "st\022\020\n\010proposal\030\001 \002(\004\022\020\n\010position\030\002 \001(\004\"o"
    "\n\017PromiseResponse\022\014\n\004okay\030\001 \002(\010\022\020\n\010propo"
    "sal\030\002 \002(\004\022\020\n\010position\030\004 \001(\004\022*\n\006action\030\003 "
    "\001(\0132\032.mesos.internal.log.Action\"\211\002\n\014Writ"
    "eRequest\022\020\n\010proposal\030\001 \002(\004\022\020\n\010position\030\002"
    " \002(\004\022\017\n\007learned\030\003 \001(\010\022-\n\004type\030\004 \002(\0162\037.me"
    "sos.internal.log.Action.Type\022+\n\003nop\030\005 \001("
    "\0132\036.mesos.internal.log.Action.Nop\0221\n\006app"
    "end\030\006 \001(\0132!.mesos.internal.log.Action.Ap"
    "pend\0225\n\010truncate\030\007 \001(\0132#.mesos.internal."
    "log.Action.Truncate\"A\n\rWriteResponse\022\014\n\004"
    "okay\030\001 \002(\010\022\020\n\010proposal\030\002 \002(\004\022\020\n\010position"
    "\030\003 \002(\004\"<\n\016LearnedMessage\022*\n\006action\030\001 \002(\013"
    "2\032.mesos.internal.log.Action\"\020\n\016RecoverR"
    "equest\"b\n\017RecoverResponse\0223\n\006status\030\001 \002("
    "\0162#.mesos.internal.log.Metadata.Status\022\r"
    "\n\005begin\030\002 \001(\004\022\013\n\003end\030\003 \001(\004", 1546);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages/log.proto", &protobuf_RegisterTypes);
  Promise::default_instance_ = new Promise();
  Action::default_instance_ = new Action();
  Action_Nop::default_instance_ = new Action_Nop();
  Action_Append::default_instance_ = new Action_Append();
  Action_Truncate::default_instance_ = new Action_Truncate();
  Metadata::default_instance_ = new Metadata();
  Record::default_instance_ = new Record();
  PromiseRequest::default_instance_ = new PromiseRequest();
  PromiseResponse::default_instance_ = new PromiseResponse();
  WriteRequest::default_instance_ = new WriteRequest();
  WriteResponse::default_instance_ = new WriteResponse();
  LearnedMessage::default_instance_ = new LearnedMessage();
  RecoverRequest::default_instance_ = new RecoverRequest();
  RecoverResponse::default_instance_ = new RecoverResponse();
  Promise::default_instance_->InitAsDefaultInstance();
  Action::default_instance_->InitAsDefaultInstance();
  Action_Nop::default_instance_->InitAsDefaultInstance();
  Action_Append::default_instance_->InitAsDefaultInstance();
  Action_Truncate::default_instance_->InitAsDefaultInstance();
  Metadata::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  PromiseRequest::default_instance_->InitAsDefaultInstance();
  PromiseResponse::default_instance_->InitAsDefaultInstance();
  WriteRequest::default_instance_->InitAsDefaultInstance();
  WriteResponse::default_instance_->InitAsDefaultInstance();
  LearnedMessage::default_instance_->InitAsDefaultInstance();
  RecoverRequest::default_instance_->InitAsDefaultInstance();
  RecoverResponse::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_messages_2flog_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_messages_2flog_2eproto {
  StaticDescriptorInitializer_messages_2flog_2eproto() {
    protobuf_AddDesc_messages_2flog_2eproto();
  }
} static_descriptor_initializer_messages_2flog_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Promise::kProposalFieldNumber;
#endif  // !_MSC_VER

Promise::Promise()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Promise::InitAsDefaultInstance() {
}

Promise::Promise(const Promise& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Promise::SharedCtor() {
  _cached_size_ = 0;
  proposal_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Promise::~Promise() {
  SharedDtor();
}

void Promise::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Promise::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Promise::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Promise_descriptor_;
}

const Promise& Promise::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Promise* Promise::default_instance_ = NULL;

Promise* Promise::New() const {
  return new Promise;
}

void Promise::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proposal_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Promise::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 proposal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_)));
          set_has_proposal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Promise::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proposal(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Promise::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proposal(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Promise::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 proposal = 1;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Promise::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Promise* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Promise*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Promise::MergeFrom(const Promise& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proposal()) {
      set_proposal(from.proposal());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Promise::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Promise::CopyFrom(const Promise& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Promise::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Promise::Swap(Promise* other) {
  if (other != this) {
    std::swap(proposal_, other->proposal_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Promise::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Promise_descriptor_;
  metadata.reflection = Promise_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Action_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Type_descriptor_;
}
bool Action_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Action_Type Action::NOP;
const Action_Type Action::APPEND;
const Action_Type Action::TRUNCATE;
const Action_Type Action::Type_MIN;
const Action_Type Action::Type_MAX;
const int Action::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

Action_Nop::Action_Nop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action_Nop::InitAsDefaultInstance() {
}

Action_Nop::Action_Nop(const Action_Nop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action_Nop::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action_Nop::~Action_Nop() {
  SharedDtor();
}

void Action_Nop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Action_Nop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action_Nop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Nop_descriptor_;
}

const Action_Nop& Action_Nop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Action_Nop* Action_Nop::default_instance_ = NULL;

Action_Nop* Action_Nop::New() const {
  return new Action_Nop;
}

void Action_Nop::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action_Nop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void Action_Nop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action_Nop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action_Nop::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action_Nop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action_Nop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action_Nop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action_Nop::MergeFrom(const Action_Nop& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action_Nop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_Nop::CopyFrom(const Action_Nop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Nop::IsInitialized() const {

  return true;
}

void Action_Nop::Swap(Action_Nop* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action_Nop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_Nop_descriptor_;
  metadata.reflection = Action_Nop_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Action_Append::kBytesFieldNumber;
const int Action_Append::kCksumFieldNumber;
#endif  // !_MSC_VER

Action_Append::Action_Append()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action_Append::InitAsDefaultInstance() {
}

Action_Append::Action_Append(const Action_Append& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action_Append::SharedCtor() {
  _cached_size_ = 0;
  bytes_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  cksum_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action_Append::~Action_Append() {
  SharedDtor();
}

void Action_Append::SharedDtor() {
  if (bytes_ != &::google::protobuf::internal::kEmptyString) {
    delete bytes_;
  }
  if (cksum_ != &::google::protobuf::internal::kEmptyString) {
    delete cksum_;
  }
  if (this != default_instance_) {
  }
}

void Action_Append::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action_Append::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Append_descriptor_;
}

const Action_Append& Action_Append::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Action_Append* Action_Append::default_instance_ = NULL;

Action_Append* Action_Append::New() const {
  return new Action_Append;
}

void Action_Append::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bytes()) {
      if (bytes_ != &::google::protobuf::internal::kEmptyString) {
        bytes_->clear();
      }
    }
    if (has_cksum()) {
      if (cksum_ != &::google::protobuf::internal::kEmptyString) {
        cksum_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action_Append::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes bytes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_bytes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cksum;
        break;
      }

      // optional bytes cksum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cksum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_cksum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action_Append::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes bytes = 1;
  if (has_bytes()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->bytes(), output);
  }

  // optional bytes cksum = 2;
  if (has_cksum()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->cksum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action_Append::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes bytes = 1;
  if (has_bytes()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->bytes(), target);
  }

  // optional bytes cksum = 2;
  if (has_cksum()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->cksum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action_Append::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes bytes = 1;
    if (has_bytes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->bytes());
    }

    // optional bytes cksum = 2;
    if (has_cksum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->cksum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action_Append::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action_Append* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action_Append*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action_Append::MergeFrom(const Action_Append& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bytes()) {
      set_bytes(from.bytes());
    }
    if (from.has_cksum()) {
      set_cksum(from.cksum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action_Append::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_Append::CopyFrom(const Action_Append& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Append::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Action_Append::Swap(Action_Append* other) {
  if (other != this) {
    std::swap(bytes_, other->bytes_);
    std::swap(cksum_, other->cksum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action_Append::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_Append_descriptor_;
  metadata.reflection = Action_Append_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Action_Truncate::kToFieldNumber;
#endif  // !_MSC_VER

Action_Truncate::Action_Truncate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action_Truncate::InitAsDefaultInstance() {
}

Action_Truncate::Action_Truncate(const Action_Truncate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action_Truncate::SharedCtor() {
  _cached_size_ = 0;
  to_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action_Truncate::~Action_Truncate() {
  SharedDtor();
}

void Action_Truncate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Action_Truncate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action_Truncate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_Truncate_descriptor_;
}

const Action_Truncate& Action_Truncate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Action_Truncate* Action_Truncate::default_instance_ = NULL;

Action_Truncate* Action_Truncate::New() const {
  return new Action_Truncate;
}

void Action_Truncate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    to_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action_Truncate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 to = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &to_)));
          set_has_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action_Truncate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 to = 1;
  if (has_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->to(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action_Truncate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 to = 1;
  if (has_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->to(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action_Truncate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 to = 1;
    if (has_to()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->to());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action_Truncate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action_Truncate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action_Truncate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action_Truncate::MergeFrom(const Action_Truncate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_to()) {
      set_to(from.to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action_Truncate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action_Truncate::CopyFrom(const Action_Truncate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action_Truncate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Action_Truncate::Swap(Action_Truncate* other) {
  if (other != this) {
    std::swap(to_, other->to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action_Truncate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_Truncate_descriptor_;
  metadata.reflection = Action_Truncate_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int Action::kPositionFieldNumber;
const int Action::kPromisedFieldNumber;
const int Action::kPerformedFieldNumber;
const int Action::kLearnedFieldNumber;
const int Action::kTypeFieldNumber;
const int Action::kNopFieldNumber;
const int Action::kAppendFieldNumber;
const int Action::kTruncateFieldNumber;
#endif  // !_MSC_VER

Action::Action()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Action::InitAsDefaultInstance() {
  nop_ = const_cast< ::mesos::internal::log::Action_Nop*>(&::mesos::internal::log::Action_Nop::default_instance());
  append_ = const_cast< ::mesos::internal::log::Action_Append*>(&::mesos::internal::log::Action_Append::default_instance());
  truncate_ = const_cast< ::mesos::internal::log::Action_Truncate*>(&::mesos::internal::log::Action_Truncate::default_instance());
}

Action::Action(const Action& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Action::SharedCtor() {
  _cached_size_ = 0;
  position_ = GOOGLE_ULONGLONG(0);
  promised_ = GOOGLE_ULONGLONG(0);
  performed_ = GOOGLE_ULONGLONG(0);
  learned_ = false;
  type_ = 1;
  nop_ = NULL;
  append_ = NULL;
  truncate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Action::~Action() {
  SharedDtor();
}

void Action::SharedDtor() {
  if (this != default_instance_) {
    delete nop_;
    delete append_;
    delete truncate_;
  }
}

void Action::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Action::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Action_descriptor_;
}

const Action& Action::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Action* Action::default_instance_ = NULL;

Action* Action::New() const {
  return new Action;
}

void Action::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    position_ = GOOGLE_ULONGLONG(0);
    promised_ = GOOGLE_ULONGLONG(0);
    performed_ = GOOGLE_ULONGLONG(0);
    learned_ = false;
    type_ = 1;
    if (has_nop()) {
      if (nop_ != NULL) nop_->::mesos::internal::log::Action_Nop::Clear();
    }
    if (has_append()) {
      if (append_ != NULL) append_->::mesos::internal::log::Action_Append::Clear();
    }
    if (has_truncate()) {
      if (truncate_ != NULL) truncate_->::mesos::internal::log::Action_Truncate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Action::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_promised;
        break;
      }

      // required uint64 promised = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_promised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &promised_)));
          set_has_promised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_performed;
        break;
      }

      // optional uint64 performed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_performed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &performed_)));
          set_has_performed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_learned;
        break;
      }

      // optional bool learned = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &learned_)));
          set_has_learned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_type;
        break;
      }

      // optional .mesos.internal.log.Action.Type type = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::internal::log::Action_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::internal::log::Action_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(5, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_nop;
        break;
      }

      // optional .mesos.internal.log.Action.Nop nop = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_append;
        break;
      }

      // optional .mesos.internal.log.Action.Append append = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_truncate;
        break;
      }

      // optional .mesos.internal.log.Action.Truncate truncate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_truncate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Action::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->position(), output);
  }

  // required uint64 promised = 2;
  if (has_promised()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->promised(), output);
  }

  // optional uint64 performed = 3;
  if (has_performed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->performed(), output);
  }

  // optional bool learned = 4;
  if (has_learned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->learned(), output);
  }

  // optional .mesos.internal.log.Action.Type type = 5;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->type(), output);
  }

  // optional .mesos.internal.log.Action.Nop nop = 6;
  if (has_nop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->nop(), output);
  }

  // optional .mesos.internal.log.Action.Append append = 7;
  if (has_append()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->append(), output);
  }

  // optional .mesos.internal.log.Action.Truncate truncate = 8;
  if (has_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->truncate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Action::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->position(), target);
  }

  // required uint64 promised = 2;
  if (has_promised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->promised(), target);
  }

  // optional uint64 performed = 3;
  if (has_performed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->performed(), target);
  }

  // optional bool learned = 4;
  if (has_learned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->learned(), target);
  }

  // optional .mesos.internal.log.Action.Type type = 5;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->type(), target);
  }

  // optional .mesos.internal.log.Action.Nop nop = 6;
  if (has_nop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->nop(), target);
  }

  // optional .mesos.internal.log.Action.Append append = 7;
  if (has_append()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->append(), target);
  }

  // optional .mesos.internal.log.Action.Truncate truncate = 8;
  if (has_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->truncate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Action::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

    // required uint64 promised = 2;
    if (has_promised()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->promised());
    }

    // optional uint64 performed = 3;
    if (has_performed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->performed());
    }

    // optional bool learned = 4;
    if (has_learned()) {
      total_size += 1 + 1;
    }

    // optional .mesos.internal.log.Action.Type type = 5;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.internal.log.Action.Nop nop = 6;
    if (has_nop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nop());
    }

    // optional .mesos.internal.log.Action.Append append = 7;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append());
    }

    // optional .mesos.internal.log.Action.Truncate truncate = 8;
    if (has_truncate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truncate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Action::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Action* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Action*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Action::MergeFrom(const Action& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_promised()) {
      set_promised(from.promised());
    }
    if (from.has_performed()) {
      set_performed(from.performed());
    }
    if (from.has_learned()) {
      set_learned(from.learned());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nop()) {
      mutable_nop()->::mesos::internal::log::Action_Nop::MergeFrom(from.nop());
    }
    if (from.has_append()) {
      mutable_append()->::mesos::internal::log::Action_Append::MergeFrom(from.append());
    }
    if (from.has_truncate()) {
      mutable_truncate()->::mesos::internal::log::Action_Truncate::MergeFrom(from.truncate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Action::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Action::CopyFrom(const Action& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Action::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_append()) {
    if (!this->append().IsInitialized()) return false;
  }
  if (has_truncate()) {
    if (!this->truncate().IsInitialized()) return false;
  }
  return true;
}

void Action::Swap(Action* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(promised_, other->promised_);
    std::swap(performed_, other->performed_);
    std::swap(learned_, other->learned_);
    std::swap(type_, other->type_);
    std::swap(nop_, other->nop_);
    std::swap(append_, other->append_);
    std::swap(truncate_, other->truncate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Action::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Action_descriptor_;
  metadata.reflection = Action_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Metadata_Status_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_Status_descriptor_;
}
bool Metadata_Status_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Metadata_Status Metadata::VOTING;
const Metadata_Status Metadata::RECOVERING;
const Metadata_Status Metadata::STARTING;
const Metadata_Status Metadata::EMPTY;
const Metadata_Status Metadata::Status_MIN;
const Metadata_Status Metadata::Status_MAX;
const int Metadata::Status_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Metadata::kStatusFieldNumber;
const int Metadata::kPromisedFieldNumber;
#endif  // !_MSC_VER

Metadata::Metadata()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Metadata::InitAsDefaultInstance() {
}

Metadata::Metadata(const Metadata& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Metadata::SharedCtor() {
  _cached_size_ = 0;
  status_ = 4;
  promised_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Metadata::~Metadata() {
  SharedDtor();
}

void Metadata::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Metadata::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Metadata::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Metadata_descriptor_;
}

const Metadata& Metadata::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Metadata* Metadata::default_instance_ = NULL;

Metadata* Metadata::New() const {
  return new Metadata;
}

void Metadata::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 4;
    promised_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Metadata::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::internal::log::Metadata_Status_IsValid(value)) {
            set_status(static_cast< ::mesos::internal::log::Metadata_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_promised;
        break;
      }

      // required uint64 promised = 2 [default = 0];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_promised:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &promised_)));
          set_has_promised();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Metadata::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // required uint64 promised = 2 [default = 0];
  if (has_promised()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->promised(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Metadata::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // required uint64 promised = 2 [default = 0];
  if (has_promised()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->promised(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Metadata::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.log.Metadata.Status status = 1 [default = EMPTY];
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // required uint64 promised = 2 [default = 0];
    if (has_promised()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->promised());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Metadata::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Metadata* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Metadata*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Metadata::MergeFrom(const Metadata& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_promised()) {
      set_promised(from.promised());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Metadata::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Metadata::CopyFrom(const Metadata& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Metadata::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Metadata::Swap(Metadata* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(promised_, other->promised_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Metadata::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Metadata_descriptor_;
  metadata.reflection = Metadata_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* Record_Type_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_Type_descriptor_;
}
bool Record_Type_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const Record_Type Record::PROMISE;
const Record_Type Record::ACTION;
const Record_Type Record::METADATA;
const Record_Type Record::Type_MIN;
const Record_Type Record::Type_MAX;
const int Record::Type_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int Record::kTypeFieldNumber;
const int Record::kPromiseFieldNumber;
const int Record::kActionFieldNumber;
const int Record::kMetadataFieldNumber;
#endif  // !_MSC_VER

Record::Record()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Record::InitAsDefaultInstance() {
  promise_ = const_cast< ::mesos::internal::log::Promise*>(&::mesos::internal::log::Promise::default_instance());
  action_ = const_cast< ::mesos::internal::log::Action*>(&::mesos::internal::log::Action::default_instance());
  metadata_ = const_cast< ::mesos::internal::log::Metadata*>(&::mesos::internal::log::Metadata::default_instance());
}

Record::Record(const Record& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  promise_ = NULL;
  action_ = NULL;
  metadata_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  SharedDtor();
}

void Record::SharedDtor() {
  if (this != default_instance_) {
    delete promise_;
    delete action_;
    delete metadata_;
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New() const {
  return new Record;
}

void Record::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
    if (has_promise()) {
      if (promise_ != NULL) promise_->::mesos::internal::log::Promise::Clear();
    }
    if (has_action()) {
      if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
    }
    if (has_metadata()) {
      if (metadata_ != NULL) metadata_->::mesos::internal::log::Metadata::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.log.Record.Type type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::internal::log::Record_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::internal::log::Record_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_promise;
        break;
      }

      // optional .mesos.internal.log.Promise promise = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_promise:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_promise()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // optional .mesos.internal.log.Action action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_metadata;
        break;
      }

      // optional .mesos.internal.log.Metadata metadata = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_metadata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_metadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.log.Record.Type type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional .mesos.internal.log.Promise promise = 2;
  if (has_promise()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->promise(), output);
  }

  // optional .mesos.internal.log.Action action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->action(), output);
  }

  // optional .mesos.internal.log.Metadata metadata = 4;
  if (has_metadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->metadata(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Record::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.log.Record.Type type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional .mesos.internal.log.Promise promise = 2;
  if (has_promise()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->promise(), target);
  }

  // optional .mesos.internal.log.Action action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->action(), target);
  }

  // optional .mesos.internal.log.Metadata metadata = 4;
  if (has_metadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->metadata(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Record::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.log.Record.Type type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.internal.log.Promise promise = 2;
    if (has_promise()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->promise());
    }

    // optional .mesos.internal.log.Action action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

    // optional .mesos.internal.log.Metadata metadata = 4;
    if (has_metadata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->metadata());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Record* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Record*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_promise()) {
      mutable_promise()->::mesos::internal::log::Promise::MergeFrom(from.promise());
    }
    if (from.has_action()) {
      mutable_action()->::mesos::internal::log::Action::MergeFrom(from.action());
    }
    if (from.has_metadata()) {
      mutable_metadata()->::mesos::internal::log::Metadata::MergeFrom(from.metadata());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_promise()) {
    if (!this->promise().IsInitialized()) return false;
  }
  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  if (has_metadata()) {
    if (!this->metadata().IsInitialized()) return false;
  }
  return true;
}

void Record::Swap(Record* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(promise_, other->promise_);
    std::swap(action_, other->action_);
    std::swap(metadata_, other->metadata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PromiseRequest::kProposalFieldNumber;
const int PromiseRequest::kPositionFieldNumber;
#endif  // !_MSC_VER

PromiseRequest::PromiseRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PromiseRequest::InitAsDefaultInstance() {
}

PromiseRequest::PromiseRequest(const PromiseRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PromiseRequest::SharedCtor() {
  _cached_size_ = 0;
  proposal_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PromiseRequest::~PromiseRequest() {
  SharedDtor();
}

void PromiseRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PromiseRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromiseRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PromiseRequest_descriptor_;
}

const PromiseRequest& PromiseRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

PromiseRequest* PromiseRequest::default_instance_ = NULL;

PromiseRequest* PromiseRequest::New() const {
  return new PromiseRequest;
}

void PromiseRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proposal_ = GOOGLE_ULONGLONG(0);
    position_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PromiseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 proposal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_)));
          set_has_proposal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // optional uint64 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PromiseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proposal(), output);
  }

  // optional uint64 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PromiseRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proposal(), target);
  }

  // optional uint64 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PromiseRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 proposal = 1;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal());
    }

    // optional uint64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromiseRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PromiseRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PromiseRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PromiseRequest::MergeFrom(const PromiseRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proposal()) {
      set_proposal(from.proposal());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PromiseRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromiseRequest::CopyFrom(const PromiseRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromiseRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PromiseRequest::Swap(PromiseRequest* other) {
  if (other != this) {
    std::swap(proposal_, other->proposal_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PromiseRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PromiseRequest_descriptor_;
  metadata.reflection = PromiseRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PromiseResponse::kOkayFieldNumber;
const int PromiseResponse::kProposalFieldNumber;
const int PromiseResponse::kPositionFieldNumber;
const int PromiseResponse::kActionFieldNumber;
#endif  // !_MSC_VER

PromiseResponse::PromiseResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PromiseResponse::InitAsDefaultInstance() {
  action_ = const_cast< ::mesos::internal::log::Action*>(&::mesos::internal::log::Action::default_instance());
}

PromiseResponse::PromiseResponse(const PromiseResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PromiseResponse::SharedCtor() {
  _cached_size_ = 0;
  okay_ = false;
  proposal_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PromiseResponse::~PromiseResponse() {
  SharedDtor();
}

void PromiseResponse::SharedDtor() {
  if (this != default_instance_) {
    delete action_;
  }
}

void PromiseResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PromiseResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PromiseResponse_descriptor_;
}

const PromiseResponse& PromiseResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

PromiseResponse* PromiseResponse::default_instance_ = NULL;

PromiseResponse* PromiseResponse::New() const {
  return new PromiseResponse;
}

void PromiseResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    okay_ = false;
    proposal_ = GOOGLE_ULONGLONG(0);
    position_ = GOOGLE_ULONGLONG(0);
    if (has_action()) {
      if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PromiseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool okay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &okay_)));
          set_has_okay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proposal;
        break;
      }

      // required uint64 proposal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proposal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_)));
          set_has_proposal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // optional .mesos.internal.log.Action action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_position;
        break;
      }

      // optional uint64 position = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PromiseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool okay = 1;
  if (has_okay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->okay(), output);
  }

  // required uint64 proposal = 2;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposal(), output);
  }

  // optional .mesos.internal.log.Action action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->action(), output);
  }

  // optional uint64 position = 4;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PromiseResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool okay = 1;
  if (has_okay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->okay(), target);
  }

  // required uint64 proposal = 2;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposal(), target);
  }

  // optional .mesos.internal.log.Action action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->action(), target);
  }

  // optional uint64 position = 4;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PromiseResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool okay = 1;
    if (has_okay()) {
      total_size += 1 + 1;
    }

    // required uint64 proposal = 2;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal());
    }

    // optional uint64 position = 4;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

    // optional .mesos.internal.log.Action action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PromiseResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PromiseResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PromiseResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PromiseResponse::MergeFrom(const PromiseResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_okay()) {
      set_okay(from.okay());
    }
    if (from.has_proposal()) {
      set_proposal(from.proposal());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_action()) {
      mutable_action()->::mesos::internal::log::Action::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PromiseResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromiseResponse::CopyFrom(const PromiseResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromiseResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  return true;
}

void PromiseResponse::Swap(PromiseResponse* other) {
  if (other != this) {
    std::swap(okay_, other->okay_);
    std::swap(proposal_, other->proposal_);
    std::swap(position_, other->position_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PromiseResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PromiseResponse_descriptor_;
  metadata.reflection = PromiseResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteRequest::kProposalFieldNumber;
const int WriteRequest::kPositionFieldNumber;
const int WriteRequest::kLearnedFieldNumber;
const int WriteRequest::kTypeFieldNumber;
const int WriteRequest::kNopFieldNumber;
const int WriteRequest::kAppendFieldNumber;
const int WriteRequest::kTruncateFieldNumber;
#endif  // !_MSC_VER

WriteRequest::WriteRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteRequest::InitAsDefaultInstance() {
  nop_ = const_cast< ::mesos::internal::log::Action_Nop*>(&::mesos::internal::log::Action_Nop::default_instance());
  append_ = const_cast< ::mesos::internal::log::Action_Append*>(&::mesos::internal::log::Action_Append::default_instance());
  truncate_ = const_cast< ::mesos::internal::log::Action_Truncate*>(&::mesos::internal::log::Action_Truncate::default_instance());
}

WriteRequest::WriteRequest(const WriteRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteRequest::SharedCtor() {
  _cached_size_ = 0;
  proposal_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  learned_ = false;
  type_ = 1;
  nop_ = NULL;
  append_ = NULL;
  truncate_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteRequest::~WriteRequest() {
  SharedDtor();
}

void WriteRequest::SharedDtor() {
  if (this != default_instance_) {
    delete nop_;
    delete append_;
    delete truncate_;
  }
}

void WriteRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteRequest_descriptor_;
}

const WriteRequest& WriteRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

WriteRequest* WriteRequest::default_instance_ = NULL;

WriteRequest* WriteRequest::New() const {
  return new WriteRequest;
}

void WriteRequest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    proposal_ = GOOGLE_ULONGLONG(0);
    position_ = GOOGLE_ULONGLONG(0);
    learned_ = false;
    type_ = 1;
    if (has_nop()) {
      if (nop_ != NULL) nop_->::mesos::internal::log::Action_Nop::Clear();
    }
    if (has_append()) {
      if (append_ != NULL) append_->::mesos::internal::log::Action_Append::Clear();
    }
    if (has_truncate()) {
      if (truncate_ != NULL) truncate_->::mesos::internal::log::Action_Truncate::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 proposal = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_)));
          set_has_proposal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }

      // required uint64 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_learned;
        break;
      }

      // optional bool learned = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_learned:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &learned_)));
          set_has_learned();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_type;
        break;
      }

      // required .mesos.internal.log.Action.Type type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::internal::log::Action_Type_IsValid(value)) {
            set_type(static_cast< ::mesos::internal::log::Action_Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_nop;
        break;
      }

      // optional .mesos.internal.log.Action.Nop nop = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_append;
        break;
      }

      // optional .mesos.internal.log.Action.Append append = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_append:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_append()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_truncate;
        break;
      }

      // optional .mesos.internal.log.Action.Truncate truncate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_truncate:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_truncate()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->proposal(), output);
  }

  // required uint64 position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->position(), output);
  }

  // optional bool learned = 3;
  if (has_learned()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->learned(), output);
  }

  // required .mesos.internal.log.Action.Type type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->type(), output);
  }

  // optional .mesos.internal.log.Action.Nop nop = 5;
  if (has_nop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->nop(), output);
  }

  // optional .mesos.internal.log.Action.Append append = 6;
  if (has_append()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->append(), output);
  }

  // optional .mesos.internal.log.Action.Truncate truncate = 7;
  if (has_truncate()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->truncate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 proposal = 1;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->proposal(), target);
  }

  // required uint64 position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->position(), target);
  }

  // optional bool learned = 3;
  if (has_learned()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->learned(), target);
  }

  // required .mesos.internal.log.Action.Type type = 4;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->type(), target);
  }

  // optional .mesos.internal.log.Action.Nop nop = 5;
  if (has_nop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->nop(), target);
  }

  // optional .mesos.internal.log.Action.Append append = 6;
  if (has_append()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->append(), target);
  }

  // optional .mesos.internal.log.Action.Truncate truncate = 7;
  if (has_truncate()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->truncate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteRequest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 proposal = 1;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal());
    }

    // required uint64 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

    // optional bool learned = 3;
    if (has_learned()) {
      total_size += 1 + 1;
    }

    // required .mesos.internal.log.Action.Type type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional .mesos.internal.log.Action.Nop nop = 5;
    if (has_nop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nop());
    }

    // optional .mesos.internal.log.Action.Append append = 6;
    if (has_append()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->append());
    }

    // optional .mesos.internal.log.Action.Truncate truncate = 7;
    if (has_truncate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->truncate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteRequest::MergeFrom(const WriteRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_proposal()) {
      set_proposal(from.proposal());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
    if (from.has_learned()) {
      set_learned(from.learned());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_nop()) {
      mutable_nop()->::mesos::internal::log::Action_Nop::MergeFrom(from.nop());
    }
    if (from.has_append()) {
      mutable_append()->::mesos::internal::log::Action_Append::MergeFrom(from.append());
    }
    if (from.has_truncate()) {
      mutable_truncate()->::mesos::internal::log::Action_Truncate::MergeFrom(from.truncate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteRequest::CopyFrom(const WriteRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (has_append()) {
    if (!this->append().IsInitialized()) return false;
  }
  if (has_truncate()) {
    if (!this->truncate().IsInitialized()) return false;
  }
  return true;
}

void WriteRequest::Swap(WriteRequest* other) {
  if (other != this) {
    std::swap(proposal_, other->proposal_);
    std::swap(position_, other->position_);
    std::swap(learned_, other->learned_);
    std::swap(type_, other->type_);
    std::swap(nop_, other->nop_);
    std::swap(append_, other->append_);
    std::swap(truncate_, other->truncate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteRequest_descriptor_;
  metadata.reflection = WriteRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WriteResponse::kOkayFieldNumber;
const int WriteResponse::kProposalFieldNumber;
const int WriteResponse::kPositionFieldNumber;
#endif  // !_MSC_VER

WriteResponse::WriteResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WriteResponse::InitAsDefaultInstance() {
}

WriteResponse::WriteResponse(const WriteResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WriteResponse::SharedCtor() {
  _cached_size_ = 0;
  okay_ = false;
  proposal_ = GOOGLE_ULONGLONG(0);
  position_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WriteResponse::~WriteResponse() {
  SharedDtor();
}

void WriteResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WriteResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WriteResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WriteResponse_descriptor_;
}

const WriteResponse& WriteResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

WriteResponse* WriteResponse::default_instance_ = NULL;

WriteResponse* WriteResponse::New() const {
  return new WriteResponse;
}

void WriteResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    okay_ = false;
    proposal_ = GOOGLE_ULONGLONG(0);
    position_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WriteResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool okay = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &okay_)));
          set_has_okay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proposal;
        break;
      }

      // required uint64 proposal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proposal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &proposal_)));
          set_has_proposal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_position;
        break;
      }

      // required uint64 position = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &position_)));
          set_has_position();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WriteResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool okay = 1;
  if (has_okay()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->okay(), output);
  }

  // required uint64 proposal = 2;
  if (has_proposal()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->proposal(), output);
  }

  // required uint64 position = 3;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->position(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WriteResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool okay = 1;
  if (has_okay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->okay(), target);
  }

  // required uint64 proposal = 2;
  if (has_proposal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->proposal(), target);
  }

  // required uint64 position = 3;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->position(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WriteResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool okay = 1;
    if (has_okay()) {
      total_size += 1 + 1;
    }

    // required uint64 proposal = 2;
    if (has_proposal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->proposal());
    }

    // required uint64 position = 3;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->position());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WriteResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WriteResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WriteResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WriteResponse::MergeFrom(const WriteResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_okay()) {
      set_okay(from.okay());
    }
    if (from.has_proposal()) {
      set_proposal(from.proposal());
    }
    if (from.has_position()) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WriteResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteResponse::CopyFrom(const WriteResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WriteResponse::Swap(WriteResponse* other) {
  if (other != this) {
    std::swap(okay_, other->okay_);
    std::swap(proposal_, other->proposal_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WriteResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WriteResponse_descriptor_;
  metadata.reflection = WriteResponse_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LearnedMessage::kActionFieldNumber;
#endif  // !_MSC_VER

LearnedMessage::LearnedMessage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LearnedMessage::InitAsDefaultInstance() {
  action_ = const_cast< ::mesos::internal::log::Action*>(&::mesos::internal::log::Action::default_instance());
}

LearnedMessage::LearnedMessage(const LearnedMessage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LearnedMessage::SharedCtor() {
  _cached_size_ = 0;
  action_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LearnedMessage::~LearnedMessage() {
  SharedDtor();
}

void LearnedMessage::SharedDtor() {
  if (this != default_instance_) {
    delete action_;
  }
}

void LearnedMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LearnedMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LearnedMessage_descriptor_;
}

const LearnedMessage& LearnedMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

LearnedMessage* LearnedMessage::default_instance_ = NULL;

LearnedMessage* LearnedMessage::New() const {
  return new LearnedMessage;
}

void LearnedMessage::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_action()) {
      if (action_ != NULL) action_->::mesos::internal::log::Action::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LearnedMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.log.Action action = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_action()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LearnedMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.log.Action action = 1;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LearnedMessage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.log.Action action = 1;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LearnedMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.log.Action action = 1;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LearnedMessage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LearnedMessage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LearnedMessage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LearnedMessage::MergeFrom(const LearnedMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_action()) {
      mutable_action()->::mesos::internal::log::Action::MergeFrom(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LearnedMessage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LearnedMessage::CopyFrom(const LearnedMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LearnedMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_action()) {
    if (!this->action().IsInitialized()) return false;
  }
  return true;
}

void LearnedMessage::Swap(LearnedMessage* other) {
  if (other != this) {
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LearnedMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LearnedMessage_descriptor_;
  metadata.reflection = LearnedMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RecoverRequest::RecoverRequest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverRequest::InitAsDefaultInstance() {
}

RecoverRequest::RecoverRequest(const RecoverRequest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverRequest::~RecoverRequest() {
  SharedDtor();
}

void RecoverRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverRequest_descriptor_;
}

const RecoverRequest& RecoverRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

RecoverRequest* RecoverRequest::default_instance_ = NULL;

RecoverRequest* RecoverRequest::New() const {
  return new RecoverRequest;
}

void RecoverRequest::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void RecoverRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverRequest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverRequest::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverRequest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverRequest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverRequest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverRequest::MergeFrom(const RecoverRequest& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverRequest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverRequest::CopyFrom(const RecoverRequest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverRequest::IsInitialized() const {

  return true;
}

void RecoverRequest::Swap(RecoverRequest* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverRequest_descriptor_;
  metadata.reflection = RecoverRequest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RecoverResponse::kStatusFieldNumber;
const int RecoverResponse::kBeginFieldNumber;
const int RecoverResponse::kEndFieldNumber;
#endif  // !_MSC_VER

RecoverResponse::RecoverResponse()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RecoverResponse::InitAsDefaultInstance() {
}

RecoverResponse::RecoverResponse(const RecoverResponse& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RecoverResponse::SharedCtor() {
  _cached_size_ = 0;
  status_ = 1;
  begin_ = GOOGLE_ULONGLONG(0);
  end_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RecoverResponse::~RecoverResponse() {
  SharedDtor();
}

void RecoverResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RecoverResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecoverResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RecoverResponse_descriptor_;
}

const RecoverResponse& RecoverResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_messages_2flog_2eproto();
  return *default_instance_;
}

RecoverResponse* RecoverResponse::default_instance_ = NULL;

RecoverResponse* RecoverResponse::New() const {
  return new RecoverResponse;
}

void RecoverResponse::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 1;
    begin_ = GOOGLE_ULONGLONG(0);
    end_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RecoverResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .mesos.internal.log.Metadata.Status status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::mesos::internal::log::Metadata_Status_IsValid(value)) {
            set_status(static_cast< ::mesos::internal::log::Metadata_Status >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_begin;
        break;
      }

      // optional uint64 begin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_begin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_end;
        break;
      }

      // optional uint64 end = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RecoverResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .mesos.internal.log.Metadata.Status status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->status(), output);
  }

  // optional uint64 begin = 2;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->begin(), output);
  }

  // optional uint64 end = 3;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RecoverResponse::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .mesos.internal.log.Metadata.Status status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->status(), target);
  }

  // optional uint64 begin = 2;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->begin(), target);
  }

  // optional uint64 end = 3;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RecoverResponse::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .mesos.internal.log.Metadata.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->status());
    }

    // optional uint64 begin = 2;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->begin());
    }

    // optional uint64 end = 3;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecoverResponse::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RecoverResponse* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RecoverResponse*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RecoverResponse::MergeFrom(const RecoverResponse& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RecoverResponse::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecoverResponse::CopyFrom(const RecoverResponse& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecoverResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RecoverResponse::Swap(RecoverResponse* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RecoverResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RecoverResponse_descriptor_;
  metadata.reflection = RecoverResponse_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace log
}  // namespace internal
}  // namespace mesos

// @@protoc_insertion_point(global_scope)
